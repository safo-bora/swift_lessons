import Foundation

func checkRange(value: Double) -> Int64? {
    if value < -1  { return -2 }
    else if value >= -1 && value < 0 { return -1 }
    else if value == 0 { return 0 }
    else if value > 0 && value <= 1 { return 1 }
    else if value >  1  { return 2 }
    return nil
}

print("Task 1")
assert (checkRange(value:-2) == -2)
assert (checkRange(value:-1) == -1)
assert (checkRange(value:-0.2) == -1)
assert (checkRange(value:0) == 0)
assert (checkRange(value:0.5) == 1)
assert (checkRange(value:1) == 1)
assert (checkRange(value:123456789) == 2)
print("______________________________________________________________")

func countOfDays(month: Int) -> Int? {
    switch month {
        case 1: return 31
        case 2: return 28
        case 3: return 31
        case 4: return 30
        case 5: return 31
        case 6: return 30
        case 7: return 31
        case 8: return 30
        case 9: return 31
        case 10: return 30
        case 11: return 31
        case 12: return 30
        default: 0
        }
    return nil
}

print("Task 2")
assert (countOfDays(month:1) == 31)
assert (countOfDays(month:2) == 28)
assert (countOfDays(month:10) == 30)
print("______________________________________________________________")

print("Task 3")
func countCharacteres(string: String) -> (vowels: Int, consonants: Int) {
    var vowels = 0, consonants = 0
    for character in string {
        switch String(character).lowercased() {
        case "a","e","i","o","u":
            vowels += 1
        case "b","c","d","f","g","h","j","k","l","m","n","p","q","r","s","t","v","w","x","y","z":
            consonants += 1
        default:
            break
        }
    }
    return (vowels, consonants)
}

let text = """
Swiftâ€™s unified function syntax is flexible enough to express anything from a simple C-style function with no parameter names to a complex Objective-C-style method with names and argument labels for each parameter. Parameters can provide default values to simplify function calls and can be passed as in-out parameters, which modify a passed variable once the function has completed its execution.
"""
print(countCharacteres(string: text).vowels)
print(countCharacteres(string: text).consonants)

print("______________________________________________________________")

print("Task 4")
func countOfDays2(month:Int) {
    guard let days = countOfDays(month:month) else {
        return
    }
    print(days)
}

func checkRange2(value:Double) {
    guard let result = checkRange(value:value) else {
        return
    }
    print(result)
}

countOfDays2(month:1)
countOfDays2(month:2)
countOfDays2(month:3)

checkRange2(value:0.5)
checkRange2(value:200)
checkRange2(value:-300)

print("______________________________________________________________")

print("Task 5")
let my_array: [Int] =  [2, 6, -2, 0, -1, 5, 11, -19, -5, 25]

for number in my_array {
    if number > 0 {
        print(number)
    }
}

print("______________________________________________________________")
print("Task 6")
var y = 0.0
for x in stride(from: 2.0, to: 4.0, by: 0.2) {
    y = (pow(x, 2))
    print(x, y)
//    while y < 10 {
//        print(x, y)
//    }
}

print("______________________________________________________________")
print("Task 7")

func validateNumbers(number1:Int64, number2:Int64, number3:Int64) -> Bool{
    if (number1 == number2) || (number2 == number3) || (number1 == number3) {
        print("Number are the same!!!")
        return true
    }
    
    else {
        print("Number are different!!!")
        return false
    }
}

assert(validateNumbers(number1:10, number2:15, number3:100) == false)
assert(validateNumbers(number1:5, number2:5, number3:0) == true)
assert(validateNumbers(number1:1000, number2:10000, number3:500) == false)
assert(validateNumbers(number1:0, number2:0, number3:0) == true)

print("______________________________________________________________")

print("Task 8")

print("The sum of the series:")

extension Array where Element: Numeric {
    var total: Element { return reduce(0, +) }
}

let numbers = [5.0, 10, 23, 45, 78, 90]
let sum = numbers.total
print(sum)

print("______________________________________________________________")

print("Task 9 - remove from array example")

var animals = ["cats", "dogs", "chimps", "moose"]

print("BEFORE: \(animals.count)")

for animal in animals {
    print(animal)
    let index = animals.firstIndex(of: animal)
    animals.remove(at: index ?? 0)
}

print("AFTER: \(animals.count)")
